// // 각 Vue 인스턴스는 data 객체에 있는 모든 속성을 프록시 처리 합니다.

// // 데이터 객체
// var data = { a: 1 }

// // Vue 인스턴스에 데이터 객체를 추가합니다.
// var vm = new Vue({
//     data: data
// })

// // 같은 객체를 참조합니다.
// vm.a === data.a // => true

// // 속성 설정은 원본 데이터에도 영향을 미칩니다.
// vm.a = 2
// data.a // => 2

// data.a = 3
// vm.a // => 3

var obj = {
    foo: 'bar'
}

// 기존 속성이 변경되는 것을 막아 반응성 시스템이 추적할 수 없다는 것을 의미
Object.freeze(obj)

new Vue({
    el: '#app',
    data: obj
})

//-------------------------------------------------------------------------------------
// 속성과 메소드

var data = { a: 1 }
var vm = new Vue({
    el: '#example',
    data: data
})

// Vue 인스턴스는 데이터 속성 이외에도 유용한 인스턴스 속성 및 메소드를 제공합니다.
// 다른 사용자 정의 속성과 구분하기 위해 $ 접두어를 붙였습니다.
vm.$data === data // => true
vm.$el === document.getElementById('example') // => true

// $watch 는 인스턴스 메소드 입니다.
vm.$watch('a', function (newVal, oldVal) {
    // vm.a 가 변경되면 호출 됩니다.
})

//-------------------------------------------------------------------------------------
// 인스턴스 라이프사이클 훅
/**
 * 각 Vue 인스턴스는 생성될 때 일련의 초기화 단계를 거칩니다.
 * 예를 들어, 데이터 관찰 설정이 필요한 경우, 템플릿을 컴파일하는 경우, 
 * 인스턴스를 DOM에 마운트하는 경우, 그리고 데이터가 변경되어 DOM을 업데이트 하는 경우가 있습니다.
 * 그 과정에서 사용자 정의 로직을 실행할 수 있는 라이프사이클 훅도 호출됩니다.
 * 아래 예제에서는 created 훅은 인스턴스가 생성된 후에 호출됩니다.
 */

new Vue({
    data: {
        a: 1
    },
    created: function () {
        // 'this'는 vm 인스턴스를 가리킵니다.
        console.log('a is : ' + this.a)
    }
}) // => a is : 1

/**
 * 인스턴스 라이프사이클의 여러 단계에서 호출될 다른 훅도 있습니다.
 * mounted, updated 및 destroyed가 있습니다.
 * 모든 라이프사이클 훅은 this 컨텍스트가 호출하는 Vue 인스턴스를 가리키며 호출됩니다.
 */